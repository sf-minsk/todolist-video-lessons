[{"D:\\DEV\\incubator\\todolist-lesson\\src\\reportWebVitals.ts":"1","D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\tasks-reducer.ts":"2","D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"3","D:\\DEV\\incubator\\todolist-lesson\\src\\api\\todolists-api.ts":"4","D:\\DEV\\incubator\\todolist-lesson\\src\\components\\EditableSpan\\EditableSpan.tsx":"5","D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","D:\\DEV\\incubator\\todolist-lesson\\src\\features\\login\\auth-reducer.ts":"7"},{"size":425,"mtime":1607869388000,"results":"8","hashOfConfig":"9"},{"size":5633,"mtime":1596722126000,"results":"10","hashOfConfig":"9"},{"size":1773,"mtime":1596295538000,"results":"11","hashOfConfig":"9"},{"size":3117,"mtime":1626376846460,"results":"12","hashOfConfig":"9"},{"size":952,"mtime":1594154724000,"results":"13","hashOfConfig":"9"},{"size":4585,"mtime":1597327450000,"results":"14","hashOfConfig":"9"},{"size":1954,"mtime":1631638124831,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4meflf",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\DEV\\incubator\\todolist-lesson\\src\\reportWebVitals.ts",[],"D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\tasks-reducer.ts",["32","33"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n",["34","35"],"D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["36","37","38"],"D:\\DEV\\incubator\\todolist-lesson\\src\\api\\todolists-api.ts",["39"],"D:\\DEV\\incubator\\todolist-lesson\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\DEV\\incubator\\todolist-lesson\\src\\features\\TodolistsList\\todolists-reducer.ts",["40"],"D:\\DEV\\incubator\\todolist-lesson\\src\\features\\login\\auth-reducer.ts",[],{"ruleId":"41","severity":1,"message":"42","line":5,"column":9,"nodeType":"43","messageId":"44","endLine":5,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":13,"column":94,"nodeType":"47","messageId":"48","endLine":13,"endColumn":96},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":15,"column":97,"nodeType":"55","endLine":15,"endColumn":130,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"54","line":20,"column":8,"nodeType":"55","endLine":20,"endColumn":41,"suggestions":"57"},{"ruleId":"53","severity":1,"message":"54","line":24,"column":8,"nodeType":"55","endLine":24,"endColumn":41,"suggestions":"58"},{"ruleId":"41","severity":1,"message":"59","line":2,"column":9,"nodeType":"43","messageId":"44","endLine":2,"endColumn":17},{"ruleId":"45","severity":1,"message":"46","line":10,"column":45,"nodeType":"47","messageId":"48","endLine":10,"endColumn":47},"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["62"],["63"],["64"],"'isNumber' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"65","fix":"67"},{"desc":"65","fix":"68"},"Update the dependencies array to be: [props]",{"range":"69","text":"70"},{"range":"71","text":"70"},{"range":"72","text":"70"},[765,798],"[props]",[1071,1104],[1261,1294]]